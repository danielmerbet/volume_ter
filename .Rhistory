#Modify and run 3_forecast_balance_sau.R
code3 <- "3_forecast_balance_sau.R"
file_read <- readLines(code3)
file_read[8]  <- paste0("dir <- \"", dir, "\"")
file_read[11] <- paste0("year_initial <- ", year_initial)
file_read[12] <- paste0("month_initial <- \"",month_initial,"\"")
file_read[14] <- paste0("fix_plot <- ", fix_plot, " #to set as default plots and csv outputs")
file_read[15] <- paste0("plot_actual <- ", plot_actual," #plot current season")
#For Sau we will make flow option always 1 for the moment
#file_read[17] <- paste0("out_option <- ", out_option," # 1: median last x days 2: same as last similar season")
#if (out_option==1){
file_read[39] <- paste0("  x_days <- ", x_days) #So we can control this without having outflow option 1 for Susqueda below
#}
writeLines(file_read, con=code3)
system(paste0("Rscript ", dir,code3))
#Modify and run 3_forecast_balance_sqd.R
code4 <- "3_forecast_balance_sqd.R"
file_read <- readLines(code4)
file_read[8]  <- paste0("dir <- \"", dir, "\"")
file_read[11] <- paste0("year_initial <- ", year_initial)
file_read[12] <- paste0("month_initial <- \"",month_initial,"\"")
file_read[14] <- paste0("fix_plot <- ", fix_plot, " #to set as default plots and csv outputs")
file_read[15] <- paste0("plot_actual <- ", plot_actual," #plot current season")
file_read[17] <- paste0("out_option <- ", out_option," # 1: median last x days 2: same as last similar season 3: from Comissio de desembassament")
if (out_option==1){
file_read[39] <- paste0("  x_days <- ", x_days)
}
writeLines(file_read, con=code4)
system(paste0("Rscript ", dir,code4))
#Modify and run 3_forecast_balance_sqd.R
code5 <- "3_forecast_balance_ter.R"
file_read <- readLines(code5)
file_read[8]  <- paste0("dir <- \"", dir, "\"")
file_read[11] <- paste0("year_initial <- ", year_initial)
file_read[12] <- paste0("month_initial <- \"",month_initial,"\"")
file_read[14] <- paste0("fix_plot <- ", fix_plot, " #to set as default plots and csv outputs")
file_read[15] <- paste0("plot_actual <- ", plot_actual," #plot current season")
writeLines(file_read, con=code5)
system(paste0("Rscript ", dir,code5))
#dir <- "~/Documents/intoDBP/volume_ter/"
dir <- "/home/rmarce/volume_ter/"
setwd(dir)
#####MANDATORY FIELDS TO CHANGE###############
year_initial <- 2024
month_initial <- "04" #"01":january, "03":march, "11":november etc...
#outflow option: 1 or 2 or 3
# 1 is the median value of the last x days
# 2 the same as previous season (IT COULD HAVE ERRORS if it was too different than current season)
# 3 outflows from approved volumes in the report of the Comissio de desembassament
out_option <- 3
#if (out_option==1){ #RAFA: to control this in a different way at Sau and Susqueda
x_days <- 10
#}
################OPTIONAL######################
plot_actual <- TRUE #plot current season (if there is data available)
#Recommend NOT to change if you do not want to change the default plots in GitHUB README.md
fix_plot <- FALSE #to set as default plots and csv outputs - RAFA: I do not see this implemented, would do things twice
#TRUE only for 2024-10 initialization
bias_corrected <- FALSE #whether to use bias corrected data or not
#Run 1_calculated_balance.R
#the input data must be update first to be able to run:
#in/water_balance_sau.csv
#in/water_balance_sqd.csv
code1 <- "1_calculated_balance.R"
system(paste0("Rscript ", dir,code1))
#Modify and run 2_river.R
code2 <- "2_river.R"
file_read <- readLines(code2)
file_read[8]  <- paste0("dir <- \"", dir, "\"")
file_read[10] <- paste0("year_initial <- ", year_initial)
file_read[11] <- paste0("month_initial <- \"",month_initial,"\"")
file_read[14] <- paste0("fix_plot <- ", fix_plot, " #to set as default plots and csv outputs")
file_read[15] <- paste0("bias_corrected <- ", bias_corrected," #whether to use bias corrected data or not (only for 2024-10 intialization")
writeLines(file_read, con=code2)
system(paste0("Rscript ", dir,code2))
#Modify and run 3_forecast_balance_sau.R
code3 <- "3_forecast_balance_sau.R"
file_read <- readLines(code3)
file_read[8]  <- paste0("dir <- \"", dir, "\"")
file_read[11] <- paste0("year_initial <- ", year_initial)
file_read[12] <- paste0("month_initial <- \"",month_initial,"\"")
file_read[14] <- paste0("fix_plot <- ", fix_plot, " #to set as default plots and csv outputs")
file_read[15] <- paste0("plot_actual <- ", plot_actual," #plot current season")
#For Sau we will make flow option always 1 for the moment
#file_read[17] <- paste0("out_option <- ", out_option," # 1: median last x days 2: same as last similar season")
#if (out_option==1){
file_read[39] <- paste0("  x_days <- ", x_days) #So we can control this without having outflow option 1 for Susqueda below
#}
writeLines(file_read, con=code3)
system(paste0("Rscript ", dir,code3))
#Modify and run 3_forecast_balance_sqd.R
code4 <- "3_forecast_balance_sqd.R"
file_read <- readLines(code4)
file_read[8]  <- paste0("dir <- \"", dir, "\"")
file_read[11] <- paste0("year_initial <- ", year_initial)
file_read[12] <- paste0("month_initial <- \"",month_initial,"\"")
file_read[14] <- paste0("fix_plot <- ", fix_plot, " #to set as default plots and csv outputs")
file_read[15] <- paste0("plot_actual <- ", plot_actual," #plot current season")
file_read[17] <- paste0("out_option <- ", out_option," # 1: median last x days 2: same as last similar season 3: from Comissio de desembassament")
if (out_option==1){
file_read[39] <- paste0("  x_days <- ", x_days)
}
writeLines(file_read, con=code4)
system(paste0("Rscript ", dir,code4))
#Modify and run 3_forecast_balance_sqd.R
code5 <- "3_forecast_balance_ter.R"
file_read <- readLines(code5)
file_read[8]  <- paste0("dir <- \"", dir, "\"")
file_read[11] <- paste0("year_initial <- ", year_initial)
file_read[12] <- paste0("month_initial <- \"",month_initial,"\"")
file_read[14] <- paste0("fix_plot <- ", fix_plot, " #to set as default plots and csv outputs")
file_read[15] <- paste0("plot_actual <- ", plot_actual," #plot current season")
writeLines(file_read, con=code5)
system(paste0("Rscript ", dir,code5))
#dir <- "~/Documents/intoDBP/volume_ter/"
dir <- "/home/rmarce/volume_ter/"
setwd(dir)
#####MANDATORY FIELDS TO CHANGE###############
year_initial <- 2024
month_initial <- "10" #"01":january, "03":march, "11":november etc...
#outflow option: 1 or 2 or 3
# 1 is the median value of the last x days
# 2 the same as previous season (IT COULD HAVE ERRORS if it was too different than current season)
# 3 outflows from approved volumes in the report of the Comissio de desembassament
out_option <- 3
#if (out_option==1){ #RAFA: to control this in a different way at Sau and Susqueda
x_days <- 10
#}
################OPTIONAL######################
plot_actual <- TRUE #plot current season (if there is data available)
#Recommend NOT to change if you do not want to change the default plots in GitHUB README.md
fix_plot <- FALSE #to set as default plots and csv outputs - RAFA: I do not see this implemented, would do things twice
#TRUE only for 2024-10 initialization
bias_corrected <- FALSE #whether to use bias corrected data or not
#Run 1_calculated_balance.R
#the input data must be update first to be able to run:
#in/water_balance_sau.csv
#in/water_balance_sqd.csv
code1 <- "1_calculated_balance.R"
system(paste0("Rscript ", dir,code1))
#Modify and run 2_river.R
code2 <- "2_river.R"
file_read <- readLines(code2)
file_read[8]  <- paste0("dir <- \"", dir, "\"")
file_read[10] <- paste0("year_initial <- ", year_initial)
file_read[11] <- paste0("month_initial <- \"",month_initial,"\"")
file_read[14] <- paste0("fix_plot <- ", fix_plot, " #to set as default plots and csv outputs")
file_read[15] <- paste0("bias_corrected <- ", bias_corrected," #whether to use bias corrected data or not (only for 2024-10 intialization")
writeLines(file_read, con=code2)
system(paste0("Rscript ", dir,code2))
#Modify and run 3_forecast_balance_sau.R
code3 <- "3_forecast_balance_sau.R"
file_read <- readLines(code3)
file_read[8]  <- paste0("dir <- \"", dir, "\"")
file_read[11] <- paste0("year_initial <- ", year_initial)
file_read[12] <- paste0("month_initial <- \"",month_initial,"\"")
file_read[14] <- paste0("fix_plot <- ", fix_plot, " #to set as default plots and csv outputs")
file_read[15] <- paste0("plot_actual <- ", plot_actual," #plot current season")
#For Sau we will make flow option always 1 for the moment
#file_read[17] <- paste0("out_option <- ", out_option," # 1: median last x days 2: same as last similar season")
#if (out_option==1){
file_read[39] <- paste0("  x_days <- ", x_days) #So we can control this without having outflow option 1 for Susqueda below
#}
writeLines(file_read, con=code3)
system(paste0("Rscript ", dir,code3))
#Modify and run 3_forecast_balance_sqd.R
code4 <- "3_forecast_balance_sqd.R"
file_read <- readLines(code4)
file_read[8]  <- paste0("dir <- \"", dir, "\"")
file_read[11] <- paste0("year_initial <- ", year_initial)
file_read[12] <- paste0("month_initial <- \"",month_initial,"\"")
file_read[14] <- paste0("fix_plot <- ", fix_plot, " #to set as default plots and csv outputs")
file_read[15] <- paste0("plot_actual <- ", plot_actual," #plot current season")
file_read[17] <- paste0("out_option <- ", out_option," # 1: median last x days 2: same as last similar season 3: from Comissio de desembassament")
if (out_option==1){
file_read[39] <- paste0("  x_days <- ", x_days)
}
writeLines(file_read, con=code4)
system(paste0("Rscript ", dir,code4))
#Modify and run 3_forecast_balance_sqd.R
code5 <- "3_forecast_balance_ter.R"
file_read <- readLines(code5)
file_read[8]  <- paste0("dir <- \"", dir, "\"")
file_read[11] <- paste0("year_initial <- ", year_initial)
file_read[12] <- paste0("month_initial <- \"",month_initial,"\"")
file_read[14] <- paste0("fix_plot <- ", fix_plot, " #to set as default plots and csv outputs")
file_read[15] <- paste0("plot_actual <- ", plot_actual," #plot current season")
writeLines(file_read, con=code5)
system(paste0("Rscript ", dir,code5))
#plot corrected volumes
plot(as.Date(V_sau$date), V_total[,1], type="l", col="lightgray",
ylim=c(0,unique(sqd_balance$Vmax+sau_balance$Vmax)),  ylab="Volume Ter (hm³)", xlab="Date")
for (i in 2:51){
lines(as.Date(V_sau$date), V_total[,i], col="lightgray")
}
library(lubridate)
dir <- "/home/rmarce/volume_ter/"
setwd(dir)
year_initial <- 2024
month_initial <- "10"
members <- 51
fix_plot <- FALSE #to set as default plots and csv outputs
plot_actual <- TRUE #plot current season
#initialisation forecast
date_ini <- as.Date(paste0(year_initial,"-",month_initial,"-01"))
all_dates <- seq(from=date_ini, by=1, len=215)
#previous year forecast
date_ini_previous <- as.Date(paste0(year(all_dates[1])-1, "-",month(all_dates[1]), "-01"))
dates_previous <- seq(from=date_ini_previous, by=1, len=215)
#RAFA: no entiendo como se trabaja esto...
#add ACA data
#dates_aca <- seq(as.Date("2023-04-01"), as.Date("2025-05-31"),1)
dates_aca <- seq(as.Date(paste0((year_initial-1),"-04-01")),
as.Date(paste0((year_initial+1),"-05-31")),1)
aca_min <- read.csv("in/aca_report_min.csv", header = F)
aca_min$dates <- dates_aca[round(aca_min$V1)]
aca_p5 <- read.csv("in/aca_report_p5.csv", header = F)
aca_p5$dates <- dates_aca[round(aca_p5$V1)]
aca_p15 <- read.csv("in/aca_report_p15.csv", header = F)
aca_p15$dates <- dates_aca[round(aca_p15$V1)]
aca_p25 <- read.csv("in/aca_report_p25.csv", header = F)
aca_p25$dates <- dates_aca[round(aca_p25$V1)]
aca_p50 <- read.csv("in/aca_report_p50.csv", header = F)
aca_p50$dates <- dates_aca[round(aca_p50$V1)]
get_col_transparent <- function(color, alpha) {
rgb_vals <- col2rgb(color) / 255  # Convert to 0-1 scale
rgb(rgb_vals[1], rgb_vals[2], rgb_vals[3], alpha = alpha)
}
#load sau and sqd volumes
V_sau <- read.csv(paste0("out/forecast_sau/for_V_sau_",year_initial,"_",month_initial,".csv"))
V_sqd <- read.csv(paste0("out/forecast_sqd/for_V_sqd_",year_initial,"_",month_initial,".csv"))
V_total <- V_sau[2:ncol(V_sau)] + V_sqd[2:ncol(V_sqd)]
#load sau and sqd balances
sqd_balance <- read.csv("out/calculated_sqd.csv")
sau_balance <- read.csv("out/calculated_sau.csv")
ter_balance_V <- sqd_balance$V + sau_balance$V
#current balance for the actual dates
sqd_balance_actual <- read.csv("in/water_balance_sqd.csv")
sau_balance_actual <- read.csv("in/water_balance_sau.csv")
ter_balance_actual_V <- sqd_balance_actual$V+sau_balance_actual$V
pdf(paste0("plot/3_forecast_ter_",year_initial,"_",month_initial,".pdf"))
dev.off()
#plot corrected volumes
plot(as.Date(V_sau$date), V_total[,1], type="l",
ylim=c(0,unique(sqd_balance$Vmax+sau_balance$Vmax)),  ylab="Volume Ter (hm³)", xlab="Date", col="lightgrey")
for (i in 2:51){
lines(as.Date(V_sau$date), V_total[,i], col="lightgrey")
}
# Ensemble percentiles
# 0.90 and 0.10 percentiles
upper_90 <- apply(V_total, 1, quantile, 0.90)
lower_10 <- apply(V_total, 1, quantile, 0.1)
# Plot the shaded area between 0.90 and 0.10 percentiles with transparency
polygon(c(as.Date(V_sau$date), rev(as.Date(V_sau$date))),
c(upper_90, rev(lower_10)),
col=rgb(0, 0, 1, 0.2), border=NA)  # Red with transparency
# 0.75 and 0.25 percentiles
upper_75 <- apply(V_total, 1, quantile, 0.75)
lower_25 <- apply(V_total, 1, quantile, 0.25)
# Plot the shaded area between 0.75 and 0.25 percentiles with transparency
polygon(c(as.Date(V_sau$date), rev(as.Date(V_sau$date))),
c(upper_75, rev(lower_25)),
col=rgb(0, 0, 0.6, 0.3), border=NA)  # Dark red with transparency
# Plot the ensemble median
lines(as.Date(V_sau$date), apply(V_total, 1, median), col="blue", lwd=3)
#real dynamic previous year
dates_plot <- dates_previous
sel_pos <- as.Date(sqd_balance$date) %in% dates_plot
#plot(sqd_balance$date[sel_pos],sqd_balance$V[sel_pos], type="l")
lines(as.Date(V_sau$date),ter_balance_V[sel_pos][1:length(V_sau$date)],
col="black", lwd=1.5)
lines(as.Date(sau_balance_actual$date, format = "%m/%d/%Y"),ter_balance_actual_V,
col="green", lwd=3)
legend("topleft", legend=c("Ensemble", "Previous season", "51 members", "Actual season"),
col=c("blue","black", "lightgrey","green"), lty=1, cex=0.8, bty="n")
#plot corrected volumes
plot(as.Date(V_sau$date), V_total[,1], type="l", col="lightgray",
ylim=c(0,unique(sqd_balance$Vmax+sau_balance$Vmax)),  ylab="Volume Ter (hm³)", xlab="Date")
for (i in 2:51){
lines(as.Date(V_sau$date), V_total[,i], col="lightgray")
}
#real dynamic previous year
dates_plot <- dates_previous
sel_pos <- as.Date(sqd_balance$date) %in% dates_plot
#plot(sqd_balance$date[sel_pos],sqd_balance$V[sel_pos], type="l")
lines(as.Date(V_sau$date),ter_balance_V[sel_pos][1:length(V_sau$date)],
col="black", lwd=1.5)
lines(as.Date(sau_balance_actual$date, format = "%m/%d/%Y"),ter_balance_actual_V,
col="green", lwd=3)
#ACA data
# lines(aca_p50$dates, aca_p50$V2, lty=2 ,col="darkblue", lwd=3)
# lines(aca_p25$dates, aca_p25$V2, lty=2 ,col="lightblue", lwd=3)
# lines(aca_p15$dates, aca_p15$V2, lty=2 ,col="gray", lwd=3)
# lines(aca_p5$dates, aca_p5$V2, lty=2 ,col="gold3", lwd=3)
# lines(aca_min$dates, aca_min$V2, lty=2 ,col="darkred", lwd=3)
#Emergència III
ini_date <- as.Date(V_sau$date)[1]
end_date <- as.Date(V_sau$date)[dim(V_sau)[1]]
rect(xleft = ini_date-30, ybottom = 0,
xright = end_date+30, ytop = 14,
col = get_col_transparent("brown3", 0.5), border = NA)
#Emergència II
rect(xleft = ini_date-30, ybottom = 14,
xright = end_date+30, ytop = 42.6,
col = get_col_transparent("brown1", 0.5), border = NA)
#Emergència I
rect(xleft = ini_date-30, ybottom = 42.6,
xright = end_date+30, ytop = 64.60,
col = get_col_transparent("coral1", 0.5), border = NA)
#Excepcionalitat
rect(xleft = ini_date-30, ybottom = 64.60,
xright = end_date+30, ytop = 85.20,
col = get_col_transparent("orange", 0.5), border = NA)
#Alerta
rect(xleft = ini_date-30, ybottom = 85.20,
xright = end_date+30, ytop = 121,
col = get_col_transparent("yellow", 0.5), border = NA)
rect(xleft = as.Date("2023-02-01"), ybottom = 121,
xright = end_date+30, ytop = 140,
col = get_col_transparent("yellow", 0.5), border = NA)
rect(xleft = as.Date("2023-03-01"), ybottom = 140,
xright = end_date+30, ytop = 160,
col = get_col_transparent("yellow", 0.5), border = NA)
# Ensemble percentiles
# 0.90 and 0.10 percentiles
upper_90 <- apply(V_total, 1, quantile, 0.90)
lower_10 <- apply(V_total, 1, quantile, 0.1)
abline(200,0,lty=3)
abline(85,0,lty=3)
abline(65,0,lty=3)
abline(43,0,lty=3)
abline(14,0,lty=3)
#Emergència III
ini_date <- as.Date(V_sau$date)[1]
end_date <- as.Date(V_sau$date)[dim(V_sau)[1]]
# Ensemble percentiles
# 0.90 and 0.10 percentiles
upper_90 <- apply(V_total, 1, quantile, 0.90)
lower_10 <- apply(V_total, 1, quantile, 0.1)
# Plot the shaded area between 0.90 and 0.10 percentiles with transparency
polygon(c(as.Date(V_sau$date), rev(as.Date(V_sau$date))),
c(upper_90, rev(lower_10)),
col=rgb(0, 0, 1, 0.2), border=NA)  # Red with transparency
# 0.75 and 0.25 percentiles
upper_75 <- apply(V_total, 1, quantile, 0.75)
lower_25 <- apply(V_total, 1, quantile, 0.25)
# Plot the shaded area between 0.75 and 0.25 percentiles with transparency
polygon(c(as.Date(V_sau$date), rev(as.Date(V_sau$date))),
c(upper_75, rev(lower_25)),
col=rgb(0, 0, 0.6, 0.3), border=NA)  # Dark red with transparency
# Plot the ensemble median
lines(as.Date(V_sau$date), apply(V_total, 1, median), col="blue", lwd=3)
legend("topleft", legend=c("Ensemble", "51 members",
"Actual season", "Previous season",
"P50", "P25", "P15", "P5", "MIN"),
col=c("red","lightgray",
"green","blue",
"darkblue","lightblue","gray","gold3","darkred"),
lty=c(rep(1,4),rep(2,5)), cex=0.8, bty="n")
#plot corrected volumes
plot(as.Date(V_sau$date), V_total[,1], type="l", col="lightgray",
ylim=c(0,unique(sqd_balance$Vmax+sau_balance$Vmax)),  ylab="Volume Ter (hm³)", xlab="Date")
for (i in 2:51){
lines(as.Date(V_sau$date), V_total[,i], col="lightgray")
}
#real dynamic previous year
dates_plot <- dates_previous
sel_pos <- as.Date(sqd_balance$date) %in% dates_plot
#plot(sqd_balance$date[sel_pos],sqd_balance$V[sel_pos], type="l")
lines(as.Date(V_sau$date),ter_balance_V[sel_pos][1:length(V_sau$date)],
col="black", lwd=1.5)
lines(as.Date(sau_balance_actual$date, format = "%m/%d/%Y"),ter_balance_actual_V,
col="green", lwd=3)
abline(200,0,lty=3)
abline(85,0,lty=3)
abline(65,0,lty=3)
abline(43,0,lty=3)
abline(14,0,lty=3)
abline(120,0,lty=3)
# Ensemble percentiles
# 0.90 and 0.10 percentiles
upper_90 <- apply(V_total, 1, quantile, 0.90)
lower_10 <- apply(V_total, 1, quantile, 0.1)
# Plot the shaded area between 0.90 and 0.10 percentiles with transparency
polygon(c(as.Date(V_sau$date), rev(as.Date(V_sau$date))),
c(upper_90, rev(lower_10)),
col=rgb(0, 0, 1, 0.2), border=NA)  # Red with transparency
# 0.75 and 0.25 percentiles
upper_75 <- apply(V_total, 1, quantile, 0.75)
lower_25 <- apply(V_total, 1, quantile, 0.25)
# Plot the shaded area between 0.75 and 0.25 percentiles with transparency
polygon(c(as.Date(V_sau$date), rev(as.Date(V_sau$date))),
c(upper_75, rev(lower_25)),
col=rgb(0, 0, 0.6, 0.3), border=NA)  # Dark red with transparency
# Plot the ensemble median
lines(as.Date(V_sau$date), apply(V_total, 1, median), col="blue", lwd=3)
points(as.Date("03/14/2025"),145)
points(as.Date("03/14/2025",format = "%m/%d/%Y"),145)
points(as.Date("03/14/2025",format = "%m/%d/%Y"),145,col="green")
points(as.Date("03/14/2025",format = "%m/%d/%Y"),145,pch=19,  col="green")
#plot corrected volumes
plot(as.Date(V_sau$date), V_total[,1], type="l", col="lightgray",
ylim=c(0,unique(sqd_balance$Vmax+sau_balance$Vmax)),  ylab="Volume Ter (hm³)", xlab="Date")
for (i in 2:51){
lines(as.Date(V_sau$date), V_total[,i], col="lightgray")
}
#real dynamic previous year
dates_plot <- dates_previous
sel_pos <- as.Date(sqd_balance$date) %in% dates_plot
#plot(sqd_balance$date[sel_pos],sqd_balance$V[sel_pos], type="l")
lines(as.Date(V_sau$date),ter_balance_V[sel_pos][1:length(V_sau$date)],
col="black", lwd=1.5)
lines(as.Date(sau_balance_actual$date, format = "%m/%d/%Y"),ter_balance_actual_V,
col="green", lwd=3)
points(as.Date("03/14/2025",format = "%m/%d/%Y"),145,pch=19,  col="green")
abline(200,0,lty=3)
abline(120,0,lty=3)
abline(85,0,lty=3)
abline(65,0,lty=3)
abline(43,0,lty=3)
abline(14,0,lty=3)
#Emergència III
ini_date <- as.Date(V_sau$date)[1]
end_date <- as.Date(V_sau$date)[dim(V_sau)[1]]
rect(xleft = ini_date-30, ybottom = 0,
xright = end_date+30, ytop = 14,
col = get_col_transparent("brown3", 0.5), border = NA)
#Emergència II
rect(xleft = ini_date-30, ybottom = 14,
xright = end_date+30, ytop = 42.6,
col = get_col_transparent("brown1", 0.5), border = NA)
#Emergència I
rect(xleft = ini_date-30, ybottom = 42.6,
xright = end_date+30, ytop = 64.60,
col = get_col_transparent("coral1", 0.5), border = NA)
#Excepcionalitat
rect(xleft = ini_date-30, ybottom = 64.60,
xright = end_date+30, ytop = 85.20,
col = get_col_transparent("orange", 0.5), border = NA)
#Alerta
rect(xleft = ini_date-30, ybottom = 85.20,
xright = end_date+30, ytop = 121,
col = get_col_transparent("yellow", 0.5), border = NA)
rect(xleft = as.Date("2023-02-01"), ybottom = 121,
xright = end_date+30, ytop = 140,
col = get_col_transparent("yellow", 0.5), border = NA)
rect(xleft = as.Date("2023-03-01"), ybottom = 140,
xright = end_date+30, ytop = 160,
col = get_col_transparent("yellow", 0.5), border = NA)
# Ensemble percentiles
# 0.90 and 0.10 percentiles
upper_90 <- apply(V_total, 1, quantile, 0.90)
lower_10 <- apply(V_total, 1, quantile, 0.1)
# Plot the shaded area between 0.90 and 0.10 percentiles with transparency
polygon(c(as.Date(V_sau$date), rev(as.Date(V_sau$date))),
c(upper_90, rev(lower_10)),
col=rgb(0, 0, 1, 0.2), border=NA)  # Red with transparency
# 0.75 and 0.25 percentiles
upper_75 <- apply(V_total, 1, quantile, 0.75)
lower_25 <- apply(V_total, 1, quantile, 0.25)
# Plot the shaded area between 0.75 and 0.25 percentiles with transparency
polygon(c(as.Date(V_sau$date), rev(as.Date(V_sau$date))),
c(upper_75, rev(lower_25)),
col=rgb(0, 0, 0.6, 0.3), border=NA)  # Dark red with transparency
# Plot the ensemble median
lines(as.Date(V_sau$date), apply(V_total, 1, median), col="blue", lwd=3)
legend("topleft", legend=c("Ensemble", "51 members",
"Actual season", "Previous season",
"P50", "P25", "P15", "P5", "MIN"),
col=c("red","lightgray",
"green","blue",
"darkblue","lightblue","gray","gold3","darkred"),
lty=c(rep(1,4),rep(2,5)), cex=0.8, bty="n")
dev.off()
#plot corrected volumes
plot(as.Date(V_sau$date), V_total[,1], type="l", col="lightgray",
ylim=c(0,unique(sqd_balance$Vmax+sau_balance$Vmax)),  ylab="Volume Ter (hm³)", xlab="Date")
for (i in 2:51){
lines(as.Date(V_sau$date), V_total[,i], col="lightgray")
}
#real dynamic previous year
dates_plot <- dates_previous
sel_pos <- as.Date(sqd_balance$date) %in% dates_plot
#plot(sqd_balance$date[sel_pos],sqd_balance$V[sel_pos], type="l")
lines(as.Date(V_sau$date),ter_balance_V[sel_pos][1:length(V_sau$date)],
col="black", lwd=1.5)
lines(as.Date(sau_balance_actual$date, format = "%m/%d/%Y"),ter_balance_actual_V,
col="green", lwd=3)
points(as.Date("03/14/2025",format = "%m/%d/%Y"),145,pch=19,  col="green")
abline(200,0,lty=3)
abline(120,0,lty=3)
abline(85,0,lty=3)
abline(65,0,lty=3)
abline(43,0,lty=3)
abline(14,0,lty=3)
# Ensemble percentiles
# 0.90 and 0.10 percentiles
upper_90 <- apply(V_total, 1, quantile, 0.90)
lower_10 <- apply(V_total, 1, quantile, 0.1)
# Plot the shaded area between 0.90 and 0.10 percentiles with transparency
polygon(c(as.Date(V_sau$date), rev(as.Date(V_sau$date))),
c(upper_90, rev(lower_10)),
col=rgb(0, 0, 1, 0.2), border=NA)  # Red with transparency
# 0.75 and 0.25 percentiles
upper_75 <- apply(V_total, 1, quantile, 0.75)
lower_25 <- apply(V_total, 1, quantile, 0.25)
# Plot the shaded area between 0.75 and 0.25 percentiles with transparency
polygon(c(as.Date(V_sau$date), rev(as.Date(V_sau$date))),
c(upper_75, rev(lower_25)),
col=rgb(0, 0, 0.6, 0.3), border=NA)  # Dark red with transparency
# Plot the ensemble median
lines(as.Date(V_sau$date), apply(V_total, 1, median), col="blue", lwd=3)
